NUM 0
NUM 1
NUM 2
NUM 3
NUM 4
NUM 5
NUM 6
NUM 7
NUM 8
NUM 9
NUM 10
NUM 20
NUM 30
NUM 40
NUM 50
NUM 60
NUM 70
NUM 80
NUM 90
NUM 123
NUM 241
NUM 365
NUM 419
NUM 555
NUM 667
NUM 777
NUM 800
NUM 909
NUM 1234567890
NUM 2147483647
ID a
ID A
ID b
ID B
ID c
ID C
ID d
ID D
ID e
ID E
ID f
ID F
ID g
ID G
ID h
ID H
ID i
ID I
ID j
ID J
ID k
ID K
ID l
ID L
ID m
ID M
ID n
ID N
ID o
ID O
ID p
ID P
ID q
ID Q
ID r
ID R
ID s
ID S
ID t
ID T
ID u
ID U
ID v
ID V
ID w
ID W
ID x
ID X
ID y
ID Y
ID z
ID Z
ID baba
ID ABBA
ID Eivlys
ID thequickbrownfoxjumpsoverthelazydog
ID SPHINXOFBLACKQUARTZJUDGEMYVOW
ID a1b2c3d4e5f6g7h8i9j10
ID bigNumber2147483648
ID the
ID newly
ID returned
ID integer
ID for
ID i
ID in
ID list
ID do
ID nothing
ID done
INT int
WAIN wain
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
RPAREN )
LBRACE {
RETURN return
ID a
PLUS +
ID b
SEMI ;
RBRACE }
INT int
ID gcd
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
RPAREN )
LBRACE {
INT int
ID answer
BECOMES =
NUM 0
SEMI ;
INT int
ID c
BECOMES =
NUM 0
SEMI ;
IF if
LPAREN (
ID a
EQ ==
NUM 0
RPAREN )
LBRACE {
ID answer
BECOMES =
ID b
SEMI ;
RBRACE }
ELSE else
LBRACE {
IF if
LPAREN (
ID b
EQ ==
NUM 0
RPAREN )
LBRACE {
ID answer
BECOMES =
ID a
SEMI ;
RBRACE }
ELSE else
LBRACE {
IF if
LPAREN (
ID a
LT <
ID b
RPAREN )
LBRACE {
ID c
BECOMES =
ID b
PCT %
ID a
SEMI ;
ID answer
BECOMES =
ID gcd
LPAREN (
ID a
COMMA ,
ID c
RPAREN )
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID c
BECOMES =
ID a
PCT %
ID b
SEMI ;
ID answer
BECOMES =
ID gcd
LPAREN (
ID b
COMMA ,
ID c
RPAREN )
SEMI ;
RBRACE }
RBRACE }
RBRACE }
RETURN return
ID answer
SEMI ;
RBRACE }
INT int
WAIN wain
LPAREN (
INT int
ID x
COMMA ,
INT int
ID y
RPAREN )
LBRACE {
RETURN return
ID gcd
LPAREN (
ID x
COMMA ,
ID y
RPAREN )
SEMI ;
RBRACE }
INT int
ID binsearch
LPAREN (
INT int
STAR *
ID beginning
COMMA ,
INT int
ID size
COMMA ,
INT int
ID value
RPAREN )
LBRACE {
INT int
ID left
BECOMES =
NUM 0
SEMI ;
INT int
ID right
BECOMES =
NUM 0
SEMI ;
INT int
ID middle
BECOMES =
NUM 0
SEMI ;
INT int
ID index
BECOMES =
NUM 0
SEMI ;
ID right
BECOMES =
ID size
MINUS -
NUM 1
SEMI ;
ID index
BECOMES =
NUM 0
MINUS -
NUM 1
SEMI ;
IF if
LPAREN (
ID size
GT >
NUM 0
RPAREN )
LBRACE {
WHILE while
LPAREN (
ID left
LE <=
ID right
RPAREN )
LBRACE {
ID middle
BECOMES =
LPAREN (
ID left
PLUS +
ID right
RPAREN )
SLASH /
NUM 2
SEMI ;
IF if
LPAREN (
STAR *
LPAREN (
ID beginning
PLUS +
ID middle
RPAREN )
EQ ==
ID value
RPAREN )
LBRACE {
ID index
BECOMES =
ID middle
SEMI ;
ID left
BECOMES =
ID right
PLUS +
NUM 3
SEMI ;
RBRACE }
ELSE else
LBRACE {
IF if
LPAREN (
STAR *
LPAREN (
ID beginning
PLUS +
ID middle
RPAREN )
GT >
ID value
RPAREN )
LBRACE {
ID right
BECOMES =
ID middle
MINUS -
NUM 1
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID left
BECOMES =
ID middle
PLUS +
NUM 1
SEMI ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
ELSE else
LBRACE {
RBRACE }
RETURN return
ID index
SEMI ;
RBRACE }
INT int
WAIN wain
LPAREN (
INT int
ID x
COMMA ,
INT int
ID n
RPAREN )
LBRACE {
INT int
ID y
BECOMES =
NUM 1
SEMI ;
IF if
LPAREN (
ID n
GE >=
NUM 0
RPAREN )
LBRACE {
IF if
LPAREN (
ID n
EQ ==
NUM 0
RPAREN )
LBRACE {
ID x
BECOMES =
NUM 1
SEMI ;
RBRACE }
ELSE else
LBRACE {
RBRACE }
WHILE while
LPAREN (
ID n
GT >
NUM 1
RPAREN )
LBRACE {
IF if
LPAREN (
ID n
PCT %
NUM 2
EQ ==
NUM 0
RPAREN )
LBRACE {
ID x
BECOMES =
ID x
STAR *
ID x
SEMI ;
ID n
BECOMES =
ID n
SLASH /
NUM 2
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID y
BECOMES =
ID x
STAR *
ID y
SEMI ;
ID x
BECOMES =
ID x
STAR *
ID x
SEMI ;
ID n
BECOMES =
LPAREN (
ID n
MINUS -
NUM 1
RPAREN )
SLASH /
NUM 2
SEMI ;
RBRACE }
RBRACE }
RBRACE }
ELSE else
LBRACE {
RBRACE }
RETURN return
ID x
STAR *
ID y
SEMI ;
RBRACE }
INT int
ID Int
ID INT
WAIN wain
ID Wain
ID WAIN
IF if
ID If
ID IF
ELSE else
ID Else
ID ELSE
WHILE while
ID While
ID WHILE
PRINTLN println
ID PrintLn
ID PRINTLN
RETURN return
ID Return
ID RETURN
ID null
ID Null
NULL NULL
NEW new
ID New
ID NEW
DELETE delete
ID Delete
ID DELETE
