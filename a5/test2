0 1 2 3 4 5 6 7 8 9
10 20 30 40 50 60 70 80 90
123 241 365 419 555 667 777 800 909
1234567890
2147483647
a A b B c C d D e E f F g G h H i I j J k K l L m M 
n N o O p P q Q r R s S t T u U v V w W x X y Y z Z
baba ABBA Eivlys
thequickbrownfoxjumpsoverthelazydog
SPHINXOFBLACKQUARTZJUDGEMYVOW
a1b2c3d4e5f6g7h8i9j10
bigNumber2147483648
the newly returned integer
for i in list do nothing done
//
// WLP4 program with two integer parameters, a and b
//   returns the sum of a and b
//
   int wain(int a, int b) {
     return a + b;   // unhelpful comment about summing a and b
   }
int gcd(int a, int b) {
    int answer = 0;
    int c = 0;
    if(a == 0){
    	 answer = b;
    } else {
      if(b == 0){
      	   answer = a;
      } else {
      	if(a < b){
	     c = b % a;
	     answer = gcd(a, c);
	} else {
	     c = a % b;
	     answer = gcd(b, c);
	}  
      }
    }
    return answer;
}
int wain(int x, int y) {
    return gcd(x, y);
}

//
// WLP4 Program to search for an integer value in an array;
// return the index if search value is in the array and -1 otherwise.
//


int binsearch(int* beginning, int size, int value){
    int left = 0;
    int right = 0;
    int middle = 0;
	int index = 0;
	right = size - 1;
	index = 0 - 1;
	if(size > 0) {
		while (left <= right) {
			middle = (left + right) / 2;
			if(*(beginning + middle) == value) {
				index = middle;
				left = right + 3;
			} else {
				if (*(beginning + middle) > value) {
					right = middle - 1;
				} else {
					left = middle + 1;
				}
			}
		}
	} else {}
     return index;
}

//
// WLP4 Program to compute:
//   x^n if 0 <= n
//


int wain(int x, int n){
    int y = 1;
    if (n >= 0) {
        if(n == 0) {
            x = 1;
        } else {}
        while(n > 1) {
            if(n%2 == 0) {
                x = x*x;
                n = n/2;
            } else{
                y = x*y;
                x = x*x;
                n = (n-1)/2;
            }
        }
    } else {}
    return x*y;
}

int Int INT
wain Wain WAIN
if If IF
else Else ELSE
while While WHILE
println PrintLn PRINTLN
return Return RETURN
null Null NULL
new New NEW
delete Delete DELETE